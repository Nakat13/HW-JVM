public class JvmComprehension {
    // загрузка класса в метаспейс
    public static void main(String[] args) {
        // в момент вызова метода создается фрейм мейн в стеке
        int i = 1;                      // 1 - в стеке создается переменная "i", значение которой равно 1.
        Object o = new Object();        // 2 - в куче создается объект, в стеке создается переменная "о", которой присваивается ссылка на этот объект.
        Integer ii = 2;                 // 3 - в куче создается объект типа Integer, в стеке создается переменная "ii", которой присваивается ссылка на этот объект.
        printAll(o, i, ii);             // 4 - вызов метода printAll, в стеке создается отдельный фрейм метода, в который передается ссылка на объект "о", значение переменной "i", ссылка на объект "ii". Вывод на экран: "java.lang.Object@..12".
        System.out.println("finished"); // 7 - вызов метода System.out.println, выделение места в стеке, вывод на экран: "finished".
    }

    private static void printAll(Object o, int i, Integer ii) {
        Integer uselessVar = 700;                  // 5 - в куче создается объект типа Integer, в стеке, в фрейме метода создается переменная "uselessVar", которой присваивается ссылка на этот объект.
        System.out.println(o.toString() + i + ii); // 6 - вызов метода System.out.println, в стеке создается отдельный фрейм, куда передаются ссылки на параметры "o", "ii", значение "i". toString вызывается в стеке отдельным фреймом. Стек метода очищается сразу по окончании вызова метода.
    }
}

// Сборка мусора происходит на усмотрение jvm при полной остановке потоков программы для безопасной сборки мусора.
// Программа легкая, использует мало ресурсов. Стек очистится по окончании вызова метода.
// Не думаю, что сработает сборщик мусора (не нашла информацию, может ли он не сработать).
